/*! @file SettingsDialog.h
    @brief class definition for Settings Dialog, the column of boxes and sliders on the right of the window.

    @see SettingsDialog
*/

//          Copyright Robert Douglas 2012
// Distributed under the accompanying Software License, Version 1.0.
//    (See accompanying file license.txt or copy at
//          https://subversion.assembla.com/svn/rob_douglas_sandbox/trunk/license.txt)

#ifndef SETTINGS_DIALOG_H
#define SETTINGS_DIALOG_H

#include <QtGui/QWidget>

#include <QtGui/QApplication>
#include <QtGui/QCheckBox>
#include <QtGui/QToolButton>
#include <QtGui/QMenu>
#include <QtGui/QMenuBar>
#include <QtGui/QAction>
#include <QtGui/QColorDialog>
#include <QtGui/QFormLayout>
#include <QtGui/QPushButton>
#include <QtGui/QSlider>
#include <QtGui/QSpinBox>
#include <QtGui/QDoubleSpinBox>
#include <QtGui/QVBoxLayout>
#include <QtGui/QLineEdit>

#include "Settings.h"

/*! @brief main namespace for the project
*/
namespace Disp
{
    /*! @brief Class for the column of boxes and sliders on the right of the main window

        The class has public member widgets (of type QDoubleSpinBox and QSlider) for each of the items appearing in the settings dialog
        on the right of the application window.

        For an example of how to add/edit a new button, see @ref modsetdiag.
    */
    class SettingsDialog : public QWidget
    {
        Q_OBJECT
    public:
        SettingsDialog(OrbitalAnimatorSettings &animatorSettings_, QWidget *parent = 0);

        /*! @brief widget to rotate the view around the x axis
        */
        QDoubleSpinBox* xRotationBox;
        /*! @brief widget to rotate the view around the y axis
        */
        QDoubleSpinBox* yRotationBox;
        /*! @brief widget to rotate the view around the z axis
        */
        QDoubleSpinBox* zRotationBox;

        QSlider* zoomScaleBox;

        //QSlider* scrollZoom;

        QDoubleSpinBox* rotateAmountX;
        QDoubleSpinBox* rotateAmountY;
        QDoubleSpinBox* rotateAmountZ;

        QSpinBox* rotateSpeed;

        QDoubleSpinBox* zoomAmount;

        QSpinBox* zoomSpeed;

        QSpinBox* simulateAmount;

        QSpinBox* simulateSpeed;

        QSlider* scrollTimeIndex;

        QSpinBox* timeIndex;

        int getTimeStep() const { return timeStep->value(); }
        void setFrame(int fn); 
        void setFrameRange(int fr);

    signals:

        void setCurrentIndex(int);

        void setXRot(double);

        void setYRot(double);

        void setZRot(double);

        void setZoomFactor(int);

        void rotate();

        void zoom();

        void simulate();

        void handleAnimateChecked(bool);

    public slots:

        void advanceTime();

    private slots:

        void selectCentralBodyColor();

        void selectOrbitalPlaneColor();

        void selectOrbitColor();

        void setSliderValue(int val) { scrollTimeIndex->setValue(val); }

        void setBoxValue(int val) { timeIndex->setValue(val); }

    private:

        OrbitalAnimatorSettings& animatorSettings;

        QCheckBox* animate;

        QSpinBox* timeStep;

        QPushButton* centralBodyColorSelector;

        QPushButton* orbitalPlaneColorSelector;

        QPushButton* orbitColorSelector;

        QPushButton* rotator;

        QPushButton* zoomer;

        QPushButton* simulator;

        void setupUI();
        void layoutControls();
        void makeConnections();
    };
} // namespace RobD

#endif
