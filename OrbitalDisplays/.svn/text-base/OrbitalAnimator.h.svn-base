/*! @file OrbitalAnimator.h
    @brief class definition for OrbitalAnimator, which does the OpenGL drawing.
*/

#ifndef ORBITAL_ANIMATOR_H
#define ORBITAL_ANIMATOR_H

#include "Point3d.h"
#include "GLDrawingFunctions.h"
#include "Settings.h"
#include "SettingsDialog.h"
#include "QueueActionDialog.h"
#include "OrbitalAnimationDriver.h"
#include "Orbit.h"
#include "Transforms.hpp"
#include <QtOpenGL/QGLWidget>
#include <QFileDialog>
#include <QtGui/QPainter>
#include <QtGui/QProgressDialog>
#include <QtGui/QWheelEvent>
#include <QFontMetrics>
#include <QtOpenGL/QGLFramebufferObject>
#include <QtDebug>
#include <QMessageBox>
#include <sstream>
#include <algorithm>
#include <limits>
#include <stdexcept>

extern "C" {
#include "../ffmpeg/ffmpeg.h"
}

#ifdef WIN32
#include <GL/glu.h>
#else
#include <OpenGL/glu.h>
#endif

#ifdef WIN32
#ifdef max
#undef max
#endif

#ifdef min
#undef min
#endif
#endif

#define ABS(x) ((x)<0?-(x):(x))

/*! @brief The code's main namespace
*/
namespace Disp
{
    /*! @brief class that does the OpenGL drawing
    */
    class OrbitalAnimator : public QGLWidget
    {
        Q_OBJECT
    public:
        /*! @brief Constructor
        */
        OrbitalAnimator(OrbitalAnimatorSettings& settings_, QWidget *parent = 0);
        /*! @brief Initializes the OrbitalAnimator instance
        */
        QWidget* setupUI(OrbitalAnimatorSettings& animatorSettings);
        /*! @brief Does something with Equatorial orbits

            More details on that something this function does

            @param eqo vector of type StaticDisplayOrbit holding all the static equatorial orbits
            @see setEclipticData()
            @see setSimulationData()
        */

        QSize sizeHint() const { return QSize(800, 550); }
        void setFullOrbit(bool b) { drawFullOrbit = b; }
        void setZoom(double zoomPercent) { scaleFactor = zoomPercent; updateGL(); }
        void updateOrRecord();
        void saveCurrentImage(int id);
        bool simulationDataLoaded;
        bool equatorialDataLoaded;
        bool eclipticDataLoaded;
        bool nothingLoaded() { return !simulationDataLoaded && !equatorialDataLoaded && !eclipticDataLoaded; }
        SettingsDialog* settingsDialog;
        OrbitalAnimatorSettings& settings;
        QPushButton* savePicsButton;
        QWidget* controlsWidget;
        void clearSimulationData();
        void clearEquatorialData();
        void clearEclipticData();
        void clearAllData();
        void setLoading(bool b) { loading = b; }
        void checkAndPerformAction(QTableWidgetItem* a);
        void playbackQueue(QTableWidget* queue);
        void record(QTableWidget* queue);
        double getXRotation() { return xrotation; }
        double getYRotation() { return yrotation; }
        double getZRotation() { return zrotation; }
        double getZoomScale() { return scaleFactor; }
        int getCurrentFrame() { return currentIndex; }
        int getSimulationSize() { return simulationSize; }
        void updateEclipticCache(StaticDisplayOrbits const& eco);
        void updateEquatorialCache(StaticDisplayOrbits const& eqo);
        void updateSimulationCache(OrbitData const& d);

    public slots:
        void setCurrentIndex(int index);
        void setXRot(double deg);
        void setYRot(double deg);
        void setZRot(double deg);
        void setZoomFactor(int zoom);
        void rotate();
        void zoom();
        void simulate();
        void advanceTimeIndex();

    protected:
        void initializeGL();
        void resizeGL(int w, int h);
        void paintGL();
        void wheelEvent(QWheelEvent* w);
        void mouseMoveEvent(QMouseEvent* m);

    private:
        enum Display { Pixmap, OpenGL };
        void performAction(Action a);
        void rotate(double x, double y, double z, int t);
        void zoom(double a, int t);
        void simulate(int a, int t);
        void doNothing(int t);
        void initialize(double x, double y, double z, double sc, int fr);
        void prepfs();
        void drawTrail();
        void drawParticle();
        void drawOrbit();
        void drawOrbitalNormal();
        template<Display> void drawStats();
        template<Display> void drawLoading();
        void makeMovie(QString moviePath);

        // These functoins are meant to allow generalization of overlay painting
        // via whether they are painted to a pixmap, or directly to opengl
        template<Display> void setTextColor(QColor c);
        template<Display> void drawText(QString str, int topLeftX, int topLeftY, QFontMetrics* fm);

        OrbitData orbitData;
        std::vector<Point3d> normals;
        double normalsScalar;
        double cosfs[360];
        double sinfs[360];
        int currentIndex;
        int simulationSize;
        StaticDisplayOrbits equatorialOrbits;
        StaticDisplayOrbits eclipticOrbits;
        double scaleFactor;
        Point3d minimum, maximum; //smallest and largest x, y, z, respectively
        double xrotation, yrotation, zrotation;
        QPoint lastPos;
        Sphere centralBody;
        QPainter* currentPainter;
        GLfloat coordLength;
        Point3d zEq;
        Point3d xEq;
        double obl;
        RotationAngles eqRotAngles;
        bool loading;
        bool recording;
        QDir tmpPNGFolder;
        int pictureNumber;
        int trailLength;
        bool drawFullOrbit;
    };
} // namespace Disp

#endif
